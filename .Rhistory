ch[,"City":="Chicago"]
ny <- fread('Data/new-york-city.csv', select = c(2,3,4))
ny[,"City":= "Newyork"]
wa <- fread('Data/washington.csv', select = c(2,3,4))
wa[,"City":= "Washington"]
dt <- rbind(ch,ny,wa)                                 #combine data tables
names(dt) <- str_replace_all(names(dt), c(" "="."))   #replace empty space in column name with a .
strt <- as.POSIXct(dt$Start.Time)                     #POSIX for timestamps as calendar times
dt[, "start.month" := strftime(strt, "%b")]           #extracting month from timestamp and storing in a new column start.month
dt[, "start.DOW" := strftime(strt, "%a")]             #extracting day of week from timestamp and storing in a new column start.DOW
dt[, "start.hourofday" := strftime(strt, "%H")]       #extracting hour of day from timestamp and storing in a new column start.hourofday
t1 <- strptime(dt$Start.Time, "%Y-%m-%d %H:%M:%OS") # t1 is date time object containig start time
t2<- strptime(dt$End.Time, "%Y-%m-%d %H:%M:%OS")   #t2 is date time object containing end time
dt[, "Duration" := as.numeric(t2-t1)]   # creating a new column 'duration' which is difference between start and end times in mins
summary.trip.duration <- dt [, .(Avg.time.min = mean(Duration), #generating summary table by city
total.time.min = sum(Duration),
Count = .N),
by=City
][ order(-total.time.min) ]
print(summary.trip.duration)
library(ggplot2)
plt3<- ggplot(data = summary.trip.duration, aes(x=City, y=total.time.min)) + #generating plot for total time
geom_bar(stat = "identity", fill = "purple")+
ggtitle(paste0('Histogram for total tavel time'))+
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))+
th1+labs(y = 'total travel time in minutes')
print(plt3)
plt4 <- ggplot(data = summary.trip.duration, aes(x=City, y=Avg.time.min)) + #generating plot for average time
geom_bar(stat = "identity", fill = "purple")+
ggtitle(paste0('Histogram for average tavel time in minutes'))+
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))+
th1+labs(y = 'Average travel time in minutes')
print(plt4)
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
library(ggqc)
install.packages(ggqc)
install.packages(ggqc)
install.packages(ggQC)
install.packages("ggQC")
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggQC)
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
---
title: "ggqc_test"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggQC)
```
I am going to test out the ggQC package in this project. I am new to R, and although I have made too many process QC visualizations, yet I have not used R for buliding a single one! In case you are wondering, my go to platform at work used to be JMP/JSL, but I am unemployed now, and do not want to spend the $$$ for purchasing a JMP license - thankfully R is free and this way I get to learn something new, its a WIN-WIN!
I am going to use the demo [HERE](https://cran.r-project.org/web/packages/ggQC/vignettes/XbarR_HOTTO.html) as a guide.
First step is to create a dataset. Below code will simulate production line data from a photresist (a chemical, usually liquid, used for manufacturing computer chips) manufacturing plant. The manufacturing process is a 'batch process' where each batch produces 100 bottles of resist. After packaging, 3+3+3 bottles are pulled from begining, middle and end of the fill process and sent to internal QC. One of the QC check is to measure resist coat thickness after spin coating dummy silicon wafers. In reality, many variables (temperature, humidity, time elapsed between various process steps, operator, container/reactor and so on) can affect the end result.
In below example - to keep things simple -  we will only be looking at the variability as a function of varying raw material lot.
library(ggplot2)
set.seed(5555)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/05'), by="day"), 50)
)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 13, sd = 5),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/04/02'), as.Date('2019/04/05'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/07/02'), as.Date('2019/07/05'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
```
The chart looks nice. But I would like to add spec limits to it. I occassionally find it useful to have spec limits available in visualization for XbarR charts because:
*For a production process, the capability has already been established.
*Having spec limits on the chart help in getting a quick estimate of product disposition for out of control points
*Process may be stable and in control, but off target. Mean may shift over time.
```{r}
```
The batch that has been
```{r}
library(ggplot2)
set.seed(5555)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/05'), by="day"), 50)
)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 13, sd = 5),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/04/02'), as.Date('2019/04/05'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/07/02'), as.Date('2019/07/05'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
head(resist_df)
library(ggplot2)
set.seed(5555)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/05'), by="day"), 50)
)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 13, sd = 5),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/04/02'), as.Date('2019/04/05'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/07/02'), as.Date('2019/07/05'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/05'), by="day"), 50)
)
head(df1t3)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/05'), by="day"), 50)
)
head(resist_df1t3)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/05/01'), by="day"), 50)
)
head(resist_df1t3)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/01'), by="day"), 50)
)
head(resist_df1t3)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 50)
)
head(resist_df1t3)
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 50),
print(date_run)
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10),
print(date_run)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10)
)
print(date_run)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10)
)
set.seed(5555)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10)
)
print(date_run)
set.seed(3333)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10)
)
print(date_run)
```{r}
library(ggplot2)
set.seed(3333)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10)
)
print(date_run)
head(resist_df1t3)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 11, sd = 4),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/04/02'), as.Date('2019/04/05'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/07/02'), as.Date('2019/07/05'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
```
The chart looks nice. But I would like to add spec limits to it. I occassionally find it useful to have spec limits available in visualization for XbarR charts because:
*For a production process, the capability has already been established.
*Having spec limits on the chart help in getting a quick estimate of product disposition for out of control points
*Process may be stable and in control, but off target. Mean may shift over time.
```{r}
```
The batch that has been
title: "ggqc_test"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggQC)
```
I am going to test out the ggQC package in this project. I am new to R, and although I have made too many process QC visualizations, yet I have not used R for buliding a single one! In case you are wondering, my go to platform at work used to be JMP/JSL, but I am unemployed now, and do not want to spend the $$$ for purchasing a JMP license - thankfully R is free and this way I get to learn something new, its a WIN-WIN!
I am going to use the demo [HERE](https://cran.r-project.org/web/packages/ggQC/vignettes/XbarR_HOTTO.html) as a guide.
First step is to create a dataset. Below code will simulate production line data from a photresist (a chemical, usually liquid, used for manufacturing computer chips) manufacturing plant. The manufacturing process is a 'batch process' where each batch produces 100 bottles of resist. After packaging, 3+3+3 bottles are pulled from begining, middle and end of the fill process and sent to internal QC. One of the QC check is to measure resist coat thickness after spin coating dummy silicon wafers. In reality, many variables (temperature, humidity, time elapsed between various process steps, operator, container/reactor and so on) can affect the end result.
In below example - to keep things simple -  we will only be looking at the variability as a function of varying raw material lot.
```{r}
library(ggplot2)
set.seed(3333)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 10)
)
print(date_run)
head(resist_df1t3)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 11, sd = 4),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/11'), as.Date('2019/01/20'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/01/21'), as.Date('2019/01/30'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
```
The chart looks nice. But I would like to add spec limits to it. I occassionally find it useful to have spec limits available in visualization for XbarR charts because:
*For a production process, the capability has already been established.
*Having spec limits on the chart help in getting a quick estimate of product disposition for out of control points
*Process may be stable and in control, but off target. Mean may shift over time.
```{r}
```
The batch that has been
```{r}
library(ggplot2)
set.seed(3333)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 50)
)
print(date_run)
head(resist_df1t3)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 11, sd = 4),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/11'), as.Date('2019/01/20'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/01/21'), as.Date('2019/01/30'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
```
```{r}
library(ggplot2)
set.seed(3333)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 50)
)
print(date_run)
head(resist_df1t3)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 11, sd = 4),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/11'), as.Date('2019/01/20'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/01/21'), as.Date('2019/01/30'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
```
The chart looks nice. But I would like to add spec limits to it. I occassionally find it useful to have spec limits available in visualization for XbarR charts because:
```{r}
library(ggplot2)
set.seed(3333)
resist_df1t3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10, sd = 2),
raw_material_A_lot = as.ordered(rep(1)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/01'), as.Date('2019/01/10'), by="day"), 50)
)
print(date_run)
head(resist_df1t3)
resist_df2 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 11, sd = 4),
raw_material_A_lot = as.ordered(rep(2)),
raw_material_B_lot = as.ordered(rep(1)),
date_run = sample(seq(as.Date('2019/01/11'), as.Date('2019/01/20'), by="day"), 50)
)
resist_df3 <- data.frame(
resist_bottle = as.factor(rep(1:50, each=3)),
coat_thickness = rnorm(n = 3*50, mean = 10.5, sd = 1.6),
raw_material_A_lot = as.ordered(rep(3)),
raw_material_B_lot = as.ordered(rep(2)),
date_run = sample(seq(as.Date('2019/01/21'), as.Date('2019/01/30'), by="day"), 50)
)
resist_df <- rbind(resist_df1t3, resist_df2, resist_df3)
head(resist_df)
```
Okay, now its time to try out the ggQC package.
First, I am going to make the control charts for the resist coat thickness.
```{r}
XbarR <- ggplot(resist_df, aes(x = date_run, y = coat_thickness, group = 1)) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line") +
stat_QC()
XbarR
XbarR + stat_QC_labels()
```
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "index.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "Ahmedcv.pdf")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "index.html")
setwd("~/Rwebsite/cv")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "index.html")
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "Ahmedcv.pdf")
